{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5aeed8fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T11:05:11.851244Z",
     "iopub.status.busy": "2025-06-17T11:05:11.850803Z",
     "iopub.status.idle": "2025-06-17T11:05:16.865724Z",
     "shell.execute_reply": "2025-06-17T11:05:16.864239Z"
    },
    "papermill": {
     "duration": 5.020988,
     "end_time": "2025-06-17T11:05:16.867692",
     "exception": false,
     "start_time": "2025-06-17T11:05:11.846704",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "âœ… Library dan fungsi bantuan siap digunakan.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report\n",
    "from catboost import CatBoostClassifier\n",
    "import warnings\n",
    "\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# Fungsi evaluasi\n",
    "def evaluate_model(model, X_test, y_test, model_name=\"\"):\n",
    "    y_pred = model.predict(X_test)\n",
    "    accuracy = accuracy_score(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    f1 = f1_score(y_test, y_pred)\n",
    "    print(f\"========= HASIL EVALUASI: {model_name} =========\\n\")\n",
    "    print(f\"Akurasi   : {accuracy:.4f}\")\n",
    "    print(f\"Presisi   : {precision:.4f}\")\n",
    "    print(f\"Recall    : {recall:.4f}\")\n",
    "    print(f\"F1-Score  : {f1:.4f}\\n\")\n",
    "    print(\"Laporan Klasifikasi Lengkap:\")\n",
    "    print(classification_report(y_test, y_pred))\n",
    "    return {'Akurasi': accuracy, 'Presisi': precision, 'Recall': recall, 'F1-Score': f1}\n",
    "\n",
    "print(\"âœ… Library dan fungsi bantuan siap digunakan.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2a4325ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T11:05:16.874221Z",
     "iopub.status.busy": "2025-06-17T11:05:16.873770Z",
     "iopub.status.idle": "2025-06-17T11:05:17.244840Z",
     "shell.execute_reply": "2025-06-17T11:05:17.243762Z"
    },
    "papermill": {
     "duration": 0.376177,
     "end_time": "2025-06-17T11:05:17.246697",
     "exception": false,
     "start_time": "2025-06-17T11:05:16.870520",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "âœ… Data berhasil dimuat dan dibagi. Target prediksi adalah 'cluster'.\n",
      "Kolom Fitur (X): ['general_health', 'checkup', 'exercise', 'heart_disease', 'skin_cancer', 'other_cancer', 'depression', 'diabetes', 'arthritis', 'age_category', 'height_cm', 'weight_kg', 'bmi', 'smoking_history', 'alcohol_consumption', 'fruit_consumption', 'green_vegetables_consumption', 'friedpotato_consumption', 'sex_Male']\n",
      "Ukuran X_train: (79975, 19)\n"
     ]
    }
   ],
   "source": [
    "# Muat dataset Anda\n",
    "df = pd.read_csv('/kaggle/input/fp-mlcatboostdataset/cluster1_standardscaler (1).csv')\n",
    "\n",
    "# 1. Tentukan X dan y (TARGETNYA ADALAH 'cluster')\n",
    "X = df.drop('cluster', axis=1)\n",
    "y = df['cluster']\n",
    "\n",
    "# 2. Bagi data SATU KALI SAJA untuk kedua skenario\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.2, stratify=y, random_state=42\n",
    ")\n",
    "\n",
    "print(\"âœ… Data berhasil dimuat dan dibagi. Target prediksi adalah 'cluster'.\")\n",
    "print(f\"Kolom Fitur (X): {X.columns.to_list()}\")\n",
    "print(f\"Ukuran X_train: {X_train.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9da1a21f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T11:05:17.252372Z",
     "iopub.status.busy": "2025-06-17T11:05:17.252027Z",
     "iopub.status.idle": "2025-06-17T11:05:31.542538Z",
     "shell.execute_reply": "2025-06-17T11:05:31.541410Z"
    },
    "papermill": {
     "duration": 14.295051,
     "end_time": "2025-06-17T11:05:31.544045",
     "exception": false,
     "start_time": "2025-06-17T11:05:17.248994",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Memulai Skenario A: Tanpa Scaling Tambahan ---\n",
      "========= HASIL EVALUASI: Tanpa Scaling Tambahan =========\n",
      "\n",
      "Akurasi   : 0.9945\n",
      "Presisi   : 0.9941\n",
      "Recall    : 0.9920\n",
      "F1-Score  : 0.9931\n",
      "\n",
      "Laporan Klasifikasi Lengkap:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.99      1.00      1.00     12138\n",
      "           1       0.99      0.99      0.99      7856\n",
      "\n",
      "    accuracy                           0.99     19994\n",
      "   macro avg       0.99      0.99      0.99     19994\n",
      "weighted avg       0.99      0.99      0.99     19994\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"--- Memulai Skenario A: Tanpa Scaling Tambahan ---\")\n",
    "\n",
    "# 1. Inisialisasi Model\n",
    "model_tanpa_scaling = CatBoostClassifier(iterations=1000, learning_rate=0.05, depth=6, verbose=0, random_state=42)\n",
    "\n",
    "# 2. Latih Model\n",
    "model_tanpa_scaling.fit(X_train, y_train)\n",
    "\n",
    "# 3. Evaluasi Model\n",
    "metrics_a = evaluate_model(model_tanpa_scaling, X_test, y_test, \"Tanpa Scaling Tambahan\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a74e56cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T11:05:31.549905Z",
     "iopub.status.busy": "2025-06-17T11:05:31.549580Z",
     "iopub.status.idle": "2025-06-17T11:05:46.833004Z",
     "shell.execute_reply": "2025-06-17T11:05:46.831733Z"
    },
    "papermill": {
     "duration": 15.288237,
     "end_time": "2025-06-17T11:05:46.834684",
     "exception": false,
     "start_time": "2025-06-17T11:05:31.546447",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Memulai Skenario B: Dengan Scaling Ulang ---\n",
      "âœ… Data telah di-scaling ulang menggunakan StandardScaler.\n",
      "========= HASIL EVALUASI: Dengan Scaling Ulang =========\n",
      "\n",
      "Akurasi   : 0.9945\n",
      "Presisi   : 0.9941\n",
      "Recall    : 0.9920\n",
      "F1-Score  : 0.9931\n",
      "\n",
      "Laporan Klasifikasi Lengkap:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.99      1.00      1.00     12138\n",
      "           1       0.99      0.99      0.99      7856\n",
      "\n",
      "    accuracy                           0.99     19994\n",
      "   macro avg       0.99      0.99      0.99     19994\n",
      "weighted avg       0.99      0.99      0.99     19994\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"--- Memulai Skenario B: Dengan Scaling Ulang ---\")\n",
    "\n",
    "# 1. Buat dan terapkan Scaler\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "print(\"âœ… Data telah di-scaling ulang menggunakan StandardScaler.\")\n",
    "\n",
    "# 2. Inisialisasi Model\n",
    "model_dengan_scaling = CatBoostClassifier(iterations=1000, learning_rate=0.05, depth=6, verbose=0, random_state=42)\n",
    "\n",
    "# 3. Latih Model\n",
    "model_dengan_scaling.fit(X_train_scaled, y_train)\n",
    "\n",
    "# 4. Evaluasi Model\n",
    "metrics_b = evaluate_model(model_dengan_scaling, X_test_scaled, y_test, \"Dengan Scaling Ulang\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "542fd678",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-06-17T11:05:46.842150Z",
     "iopub.status.busy": "2025-06-17T11:05:46.840991Z",
     "iopub.status.idle": "2025-06-17T11:05:47.142296Z",
     "shell.execute_reply": "2025-06-17T11:05:47.141270Z"
    },
    "papermill": {
     "duration": 0.306329,
     "end_time": "2025-06-17T11:05:47.143863",
     "exception": false,
     "start_time": "2025-06-17T11:05:46.837534",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ðŸ“Œ Ringkasan Perbandingan Akhir (Target: Cluster):\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_75c75_row0_col0, #T_75c75_row0_col1, #T_75c75_row0_col2, #T_75c75_row0_col3, #T_75c75_row1_col0, #T_75c75_row1_col1, #T_75c75_row1_col2, #T_75c75_row1_col3 {\n",
       "  background-color: #aaffaa;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_75c75\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_75c75_level0_col0\" class=\"col_heading level0 col0\" >Akurasi</th>\n",
       "      <th id=\"T_75c75_level0_col1\" class=\"col_heading level0 col1\" >Presisi</th>\n",
       "      <th id=\"T_75c75_level0_col2\" class=\"col_heading level0 col2\" >Recall</th>\n",
       "      <th id=\"T_75c75_level0_col3\" class=\"col_heading level0 col3\" >F1-Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_75c75_level0_row0\" class=\"row_heading level0 row0\" >Tanpa Scaling Tambahan (A)</th>\n",
       "      <td id=\"T_75c75_row0_col0\" class=\"data row0 col0\" >0.9945</td>\n",
       "      <td id=\"T_75c75_row0_col1\" class=\"data row0 col1\" >0.9941</td>\n",
       "      <td id=\"T_75c75_row0_col2\" class=\"data row0 col2\" >0.9920</td>\n",
       "      <td id=\"T_75c75_row0_col3\" class=\"data row0 col3\" >0.9931</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_75c75_level0_row1\" class=\"row_heading level0 row1\" >Dengan Scaling Ulang (B)</th>\n",
       "      <td id=\"T_75c75_row1_col0\" class=\"data row1 col0\" >0.9945</td>\n",
       "      <td id=\"T_75c75_row1_col1\" class=\"data row1 col1\" >0.9941</td>\n",
       "      <td id=\"T_75c75_row1_col2\" class=\"data row1 col2\" >0.9920</td>\n",
       "      <td id=\"T_75c75_row1_col3\" class=\"data row1 col3\" >0.9931</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7a49f90c4290>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Buat DataFrame perbandingan dari hasil metrik\n",
    "comparison_df = pd.DataFrame({\n",
    "    'Tanpa Scaling Tambahan (A)': metrics_a,\n",
    "    'Dengan Scaling Ulang (B)': metrics_b\n",
    "}).T\n",
    "\n",
    "print(\"ðŸ“Œ Ringkasan Perbandingan Akhir (Target: Cluster):\")\n",
    "display(comparison_df.style.highlight_max(color='#aaffaa', axis=0).format(\"{:.4f}\"))"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7679585,
     "sourceId": 12192146,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 41.830442,
   "end_time": "2025-06-17T11:05:47.968869",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-06-17T11:05:06.138427",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
