{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a8307524",
   "metadata": {
    "papermill": {
     "duration": 0.002588,
     "end_time": "2025-06-17T07:57:32.379220",
     "exception": false,
     "start_time": "2025-06-17T07:57:32.376632",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**📊 Perbandingan Model CatBoost dengan dan tanpa Seleksi Fitur 🤖**\n",
    "Notebook ini bertujuan untuk membandingkan performa model CatBoostClassifier dalam dua skenario:\n",
    "\n",
    "Skenario 1: Menggunakan dataset yang semua fiturnya telah di-scaling dengan StandardScaler.\n",
    "Skenario 2: Menggunakan dataset yang telah di-scaling dan difilter melalui proses seleksi fitur."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a148c9c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T07:57:32.384998Z",
     "iopub.status.busy": "2025-06-17T07:57:32.384588Z",
     "iopub.status.idle": "2025-06-17T07:57:37.230205Z",
     "shell.execute_reply": "2025-06-17T07:57:37.228135Z"
    },
    "papermill": {
     "duration": 4.850905,
     "end_time": "2025-06-17T07:57:37.232268",
     "exception": false,
     "start_time": "2025-06-17T07:57:32.381363",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Library yang dibutuhkan (dengan CatBoost) siap digunakan.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split, StratifiedKFold\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "from catboost import CatBoostClassifier # <-- INI YANG BARU\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "print(\"✅ Library yang dibutuhkan (dengan CatBoost) siap digunakan.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4352f950",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-06-17T07:57:37.238506Z",
     "iopub.status.busy": "2025-06-17T07:57:37.238052Z",
     "iopub.status.idle": "2025-06-17T07:57:37.743838Z",
     "shell.execute_reply": "2025-06-17T07:57:37.742889Z"
    },
    "papermill": {
     "duration": 0.510615,
     "end_time": "2025-06-17T07:57:37.745296",
     "exception": false,
     "start_time": "2025-06-17T07:57:37.234681",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Dataset df1 dan df2 berhasil dimuat.\n"
     ]
    }
   ],
   "source": [
    "# Muat dataset\n",
    "df1 = pd.read_csv('/kaggle/input/fp-mlcatboostdataset/cluster1_standardscaler (1).csv')\n",
    "df2 = pd.read_csv('/kaggle/input/fp-mlcatboostdataset/cluster2_standardscaler_feature (1).csv')\n",
    "\n",
    "print(\"✅ Dataset df1 dan df2 berhasil dimuat.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00940161",
   "metadata": {
    "papermill": {
     "duration": 0.001915,
     "end_time": "2025-06-17T07:57:37.749632",
     "exception": false,
     "start_time": "2025-06-17T07:57:37.747717",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**🛠️ Fungsi Bantuan (Helper Functions)**\n",
    "Untuk membuat kode lebih rapi dan efisien, kita akan membuat dua fungsi bantuan:\n",
    "\n",
    "evaluate_model: Untuk menghitung dan menampilkan metrik evaluasi & confusion matrix.\n",
    "plot_feature_importance: Untuk memvisualisasikan fitur-fitur yang paling berpengaruh."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "618ed397",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T07:57:37.755618Z",
     "iopub.status.busy": "2025-06-17T07:57:37.755240Z",
     "iopub.status.idle": "2025-06-17T07:58:15.000686Z",
     "shell.execute_reply": "2025-06-17T07:58:14.999762Z"
    },
    "papermill": {
     "duration": 37.251518,
     "end_time": "2025-06-17T07:58:15.003233",
     "exception": false,
     "start_time": "2025-06-17T07:57:37.751715",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=============================================\n",
      "🔍 Memproses: Dataset dengan Fitur Lengkap dengan CatBoost\n",
      "=============================================\n",
      "📊 Akurasi Test  : 0.9920\n",
      "📊 Presisi Test  : 0.9903\n",
      "📊 Recall Test   : 0.9894\n",
      "📊 F1-Score Test : 0.9899\n",
      "✅ Akurasi Train : 1.0000\n",
      "📉 Celah Akurasi : 0.0080 → Status: Baik\n",
      "\n",
      "=============================================\n",
      "🔍 Memproses: Dataset dengan Fitur Pilihan dengan CatBoost\n",
      "=============================================\n",
      "📊 Akurasi Test  : 0.9917\n",
      "📊 Presisi Test  : 0.9904\n",
      "📊 Recall Test   : 0.9886\n",
      "📊 F1-Score Test : 0.9895\n",
      "✅ Akurasi Train : 1.0000\n",
      "📉 Celah Akurasi : 0.0083 → Status: Baik\n",
      "\n",
      "\n",
      "✅ Semua proses dengan CatBoost telah selesai.\n"
     ]
    }
   ],
   "source": [
    "# Siapkan list kosong untuk menyimpan hasil\n",
    "results = []\n",
    "\n",
    "# Loop untuk kedua dataset\n",
    "for name, df in [('Dataset dengan Fitur Lengkap', df1), ('Dataset dengan Fitur Pilihan', df2)]:\n",
    "    print(f\"\\n=============================================\")\n",
    "    print(f\"🔍 Memproses: {name} dengan CatBoost\")\n",
    "    print(f\"=============================================\")\n",
    "\n",
    "    # 1. Tentukan X dan y (TARGETNYA ADALAH 'cluster')\n",
    "    X = df.drop('cluster', axis=1)\n",
    "    y = df['cluster']\n",
    "\n",
    "    # 2. Train-test split\n",
    "    X_train, X_test, y_train, y_test = train_test_split(\n",
    "        X, y, test_size=0.2, stratify=y, random_state=42\n",
    "    )\n",
    "\n",
    "    # 3. Scaling DILAKUKAN SETELAH SPLIT\n",
    "    scaler = StandardScaler()\n",
    "    X_train_scaled = scaler.fit_transform(X_train)\n",
    "    X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "    # 4. Model CatBoost\n",
    "    # Kita gunakan parameter yang kuat untuk CatBoost\n",
    "    model = CatBoostClassifier(\n",
    "        iterations=1000,\n",
    "        learning_rate=0.1,\n",
    "        depth=8,\n",
    "        subsample=0.6,\n",
    "        l2_leaf_reg=3,\n",
    "        verbose=0, # Tidak menampilkan output training\n",
    "        random_state=42\n",
    "    )\n",
    "\n",
    "    # 5. Fit model\n",
    "    model.fit(X_train_scaled, y_train)\n",
    "\n",
    "    # 6. Prediksi\n",
    "    y_test_pred = model.predict(X_test_scaled)\n",
    "    y_train_pred = model.predict(X_train_scaled)\n",
    "\n",
    "    # 7. Evaluasi\n",
    "    acc = accuracy_score(y_test, y_test_pred)\n",
    "    prec = precision_score(y_test, y_test_pred)\n",
    "    rec = recall_score(y_test, y_test_pred)\n",
    "    f1 = f1_score(y_test, y_test_pred)\n",
    "    train_acc = accuracy_score(y_train, y_train_pred)\n",
    "    acc_gap = train_acc - acc\n",
    "    overfit_status = \"Cenderung Overfitting\" if acc_gap > 0.05 else \"Baik\"\n",
    "\n",
    "    # Cetak hasil untuk dataset ini\n",
    "    print(f\"📊 Akurasi Test  : {acc:.4f}\")\n",
    "    print(f\"📊 Presisi Test  : {prec:.4f}\")\n",
    "    print(f\"📊 Recall Test   : {rec:.4f}\")\n",
    "    print(f\"📊 F1-Score Test : {f1:.4f}\")\n",
    "    print(f\"✅ Akurasi Train : {train_acc:.4f}\")\n",
    "    print(f\"📉 Celah Akurasi : {acc_gap:.4f} → Status: {overfit_status}\")\n",
    "\n",
    "    # Simpan hasil ke dalam list\n",
    "    results.append({\n",
    "        'Dataset': name,\n",
    "        'Accuracy': acc,\n",
    "        'Precision': prec,\n",
    "        'Recall': rec,\n",
    "        'F1 Score': f1,\n",
    "        'Train Accuracy': train_acc,\n",
    "        'Gap': acc_gap,\n",
    "        'Status': overfit_status\n",
    "    })\n",
    "\n",
    "print(\"\\n\\n✅ Semua proses dengan CatBoost telah selesai.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "074bc080",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T07:58:15.009302Z",
     "iopub.status.busy": "2025-06-17T07:58:15.008947Z",
     "iopub.status.idle": "2025-06-17T07:58:15.207923Z",
     "shell.execute_reply": "2025-06-17T07:58:15.206946Z"
    },
    "papermill": {
     "duration": 0.2043,
     "end_time": "2025-06-17T07:58:15.209835",
     "exception": false,
     "start_time": "2025-06-17T07:58:15.005535",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "📌 Ringkasan Hasil Akhir (menggunakan CatBoost):\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_212c2_row0_col1, #T_212c2_row0_col4 {\n",
       "  background-color: #aaffaa;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_212c2\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_212c2_level0_col0\" class=\"col_heading level0 col0\" >Dataset</th>\n",
       "      <th id=\"T_212c2_level0_col1\" class=\"col_heading level0 col1\" >Accuracy</th>\n",
       "      <th id=\"T_212c2_level0_col2\" class=\"col_heading level0 col2\" >Precision</th>\n",
       "      <th id=\"T_212c2_level0_col3\" class=\"col_heading level0 col3\" >Recall</th>\n",
       "      <th id=\"T_212c2_level0_col4\" class=\"col_heading level0 col4\" >F1 Score</th>\n",
       "      <th id=\"T_212c2_level0_col5\" class=\"col_heading level0 col5\" >Train Accuracy</th>\n",
       "      <th id=\"T_212c2_level0_col6\" class=\"col_heading level0 col6\" >Gap</th>\n",
       "      <th id=\"T_212c2_level0_col7\" class=\"col_heading level0 col7\" >Status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_212c2_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
       "      <td id=\"T_212c2_row0_col0\" class=\"data row0 col0\" >Dataset dengan Fitur Lengkap</td>\n",
       "      <td id=\"T_212c2_row0_col1\" class=\"data row0 col1\" >0.992048</td>\n",
       "      <td id=\"T_212c2_row0_col2\" class=\"data row0 col2\" >0.990317</td>\n",
       "      <td id=\"T_212c2_row0_col3\" class=\"data row0 col3\" >0.989435</td>\n",
       "      <td id=\"T_212c2_row0_col4\" class=\"data row0 col4\" >0.989876</td>\n",
       "      <td id=\"T_212c2_row0_col5\" class=\"data row0 col5\" >1.000000</td>\n",
       "      <td id=\"T_212c2_row0_col6\" class=\"data row0 col6\" >0.007952</td>\n",
       "      <td id=\"T_212c2_row0_col7\" class=\"data row0 col7\" >Baik</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_212c2_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
       "      <td id=\"T_212c2_row1_col0\" class=\"data row1 col0\" >Dataset dengan Fitur Pilihan</td>\n",
       "      <td id=\"T_212c2_row1_col1\" class=\"data row1 col1\" >0.991698</td>\n",
       "      <td id=\"T_212c2_row1_col2\" class=\"data row1 col2\" >0.990376</td>\n",
       "      <td id=\"T_212c2_row1_col3\" class=\"data row1 col3\" >0.988623</td>\n",
       "      <td id=\"T_212c2_row1_col4\" class=\"data row1 col4\" >0.989499</td>\n",
       "      <td id=\"T_212c2_row1_col5\" class=\"data row1 col5\" >1.000000</td>\n",
       "      <td id=\"T_212c2_row1_col6\" class=\"data row1 col6\" >0.008302</td>\n",
       "      <td id=\"T_212c2_row1_col7\" class=\"data row1 col7\" >Baik</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7961218ea010>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Ubah list hasil menjadi DataFrame pandas\n",
    "results_df = pd.DataFrame(results)\n",
    "\n",
    "print(\"📌 Ringkasan Hasil Akhir (menggunakan CatBoost):\")\n",
    "display(results_df.style.highlight_max(subset=['Accuracy', 'F1 Score'], color='#aaffaa', axis=0))"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7679585,
     "sourceId": 12192146,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 48.618226,
   "end_time": "2025-06-17T07:58:16.034183",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-06-17T07:57:27.415957",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
